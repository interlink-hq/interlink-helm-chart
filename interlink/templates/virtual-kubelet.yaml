---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Values.nodeName}}-node
  namespace: {{.Release.Namespace}}
  labels:
    app: {{.Values.nodeName}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{.Values.nodeName}}
  template:
    metadata:
      labels:
        app: {{.Values.nodeName}}
    spec:
      automountServiceAccountToken: true
      serviceAccountName: {{.Values.nodeName}}
      {{- with .Values.podScheduling.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podScheduling.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      imagePullSecrets:
{{ toYaml .Values.global.images.pullSecrets | indent 8 }}
      containers:
      {{- if .Values.plugin.enabled }}
      - name: plugin
        image: "{{ .Values.plugin.image.registry }}/{{ .Values.plugin.image.repository}}:{{ .Values.plugin.image.tag }}"
        imagePullPolicy: "{{ .Values.global.images.pullPolicy }}"
        {{- if .Values.plugin.privileged }}
        securityContext:
          privileged: true
        {{- end }}
        {{- with .Values.plugin.command }}
        command:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.plugin.args }}
        args:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.plugin.envs }}
        env:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
          - name: plugin-config
            mountPath: /etc/interlink/plugin.yaml
            subPath: plugin.yaml
          {{- if .Values.plugin.socket }}
          - name: sockets
            mountPath: /var/run/
          {{- end }}
          {{- with .Values.plugin.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
      {{- end }}
      {{- if .Values.interlink.enabled }}
      - name: interlink
        image: "{{ .Values.interlink.image.registry }}/{{ .Values.interlink.image.repository }}:{{ .Values.interlink.image.tag }}"
        imagePullPolicy: "{{ .Values.global.images.pullPolicy }}"
        env:
          - name: INTERLINKCONFIGPATH
            value: "/etc/interlink/InterLinkConfig.yaml"
        volumeMounts:
          - name: il-config
            mountPath: /etc/interlink/InterLinkConfig.yaml
            subPath: InterLinkConfig.yaml
          {{- if or .Values.interlink.socket .Values.plugin.socket }}
          - name: sockets
            mountPath: /var/run/
          {{- end }}
          {{- if .Values.interlink.exportPodData }}
          - name: {{.Values.interlink.dataRootVolume}}
            mountPath: /data/interlink
          {{- end }}
          {{- with .Values.interlink.extraVolumeMounts }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
      {{- end }}
      - name: vk
        image: "{{ .Values.virtualNode.image.registry }}/{{ .Values.virtualNode.image.repository }}:{{ .Values.virtualNode.image.tag }}"
        imagePullPolicy: "{{ .Values.global.images.pullPolicy }}"
        env:
        - name: NODENAME
          value: {{.Values.nodeName}}
        - name: KUBELET_PORT
          value: "10250"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: CONFIGPATH
          value: "/etc/interlink/InterLinkConfig.yaml"
        {{- if .Values.virtualNode.tracing.enabled }}
        - name: ENABLE_TRACING
          value: "1"
        {{- end }}
        {{- if .Values.OAUTH.enabled }}
        - name: VKTOKENFILE
          value: "/opt/interlink/token"
        {{- end }}
        {{- if .Values.virtualNode.HTTPProxies.HTTP }}
        - name: HTTP_PROXY
          value: {{.Values.virtualNode.HTTPProxies.HTTP}}
        {{- end }}
        {{- if .Values.virtualNode.HTTPProxies.HTTPs }}
        - name: HTTPS_PROXY
          value: {{.Values.virtualNode.HTTPProxies.HTTPs}}
        {{- end }}
        volumeMounts:
        - name: config
          mountPath: /etc/interlink/InterLinkConfig.yaml
          subPath: InterLinkConfig.yaml
        {{- if .Values.OAUTH.enabled }}
        - name: token
          mountPath: /opt/interlink
        {{- end }}
        {{- if .Values.interlink.socket }}
        - name: sockets
          mountPath: /var/run/
        {{- end }}
        {{- if .Values.interlink.tls.enabled }}
        - name: tls-certs
          mountPath: /etc/vk/certs
          readOnly: true
        {{- end }}
        {{- if .Values.virtualNode.network.enableTunnel }}
        - name: wstunnel-template
          mountPath: {{.Values.virtualNode.network.wstunnelTemplatePath | default "/etc/templates/wstunnel.yaml"}}
          subPath: wstunnel.yaml
          readOnly: true
        {{- end }}
        {{- with .Values.virtualNode.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- if .Values.OAUTH.enabled }}
      - name: refresh-token
        image: "{{ .Values.OAUTH.image.registry }}/{{ .Values.OAUTH.image.repository }}:{{ .Values.OAUTH.image.tag }}"
        imagePullPolicy: "{{ .Values.global.images.pullPolicy }}"
        env:
        - name: IAM_TOKEN_ENDPOINT
          value: {{.Values.OAUTH.TokenURL}}
        # TODO load env IAM client from secret
        - name: IAM_CLIENT_ID
          value: {{.Values.OAUTH.ClientID}}
        - name: IAM_CLIENT_SECRET
          value: {{.Values.OAUTH.ClientSecret}}
        - name: IAM_REFRESH_TOKEN
          value: {{.Values.OAUTH.RefreshToken}}
        - name: IAM_VK_AUD
          value: {{.Values.OAUTH.Audience}}
        - name: IAM_GRANT_TYPE
          value: {{.Values.OAUTH.GrantType}}
        - name: TOKEN_PATH
          value: /opt/interlink/token
        command:
        - python3
        - /opt/refresh.py
        resources:
          limits:
            cpu: 200m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 300Mi
        volumeMounts:
        - name: token
          mountPath: /opt/interlink
        {{- with .Values.OAUTH.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if .Values.sshBastion.enabled }}
      - name: ssh-bastion
        image: "{{ .Values.sshBastion.image.registry }}/{{ .Values.sshBastion.image.repository }}:{{ .Values.sshBastion.image.tag }}"
        imagePullPolicy: "{{ .Values.global.images.pullPolicy }}"
        ports:
        - containerPort: 2222
        - containerPort: 22
        env:
        - name: PUBLIC_KEY_FILE
          value: /opt/ssh/authorized_keys
        - name: USER_NAME
          value: interlink
        - name: PUBLIC_KEY_URL
          value: {{.Values.sshBastion.clientKeys.keysURL}}
        - name: DOCKER_MODS
          value: linuxserver/mods:openssh-server-ssh-tunnel
        - name: SHELL_NOLOGIN
          value: "true"
        volumeMounts:
        #- name: sockets
        #  mountPath: /config/sockets
        - name: ssh-keys
          mountPath: /opt/ssh/
        # - name: sshd-config
        #   mountPath: /etc/ssh/sshd_config
        #   subPath: sshd_config
        {{- with .Values.sshBastion.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{.Values.nodeName}}-virtual-kubelet-config
      {{- with .Values.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- if .Values.sshBastion.enabled }}
      - name: ssh-keys
        secret:
          secretName: {{.Values.nodeName}}-ssh-keys
      - name: sshd-config
        configMap:
          name: "{{.Values.nodeName}}-sshd-config"
      {{- end }}
      {{- if .Values.OAUTH.enabled }}
      - name: token
        emptyDir: {}
      {{- end }}
      {{- if .Values.interlink.enabled }}
      - name: il-config
        configMap:
          name: {{.Values.nodeName}}-interlink-config
      {{- end }}
      {{- if .Values.plugin.enabled }}
      - name: plugin-config
        configMap:
          name: {{.Values.nodeName}}-plugin-config
      {{- end }}
      {{- if or .Values.interlink.socket .Values.plugin.socket }}
      - name: sockets
        emptyDir: {}
      {{- end }}
      {{- if .Values.interlink.tls.enabled }}
      - name: tls-certs
        secret:
          secretName: {{.Values.nodeName}}-tls-certs
          optional: true
      {{- end }}
      {{- if .Values.virtualNode.network.enableTunnel }}
      - name: wstunnel-template
        configMap:
          name: {{.Values.nodeName}}-wstunnel-template
      {{- end }}

{{- if .Values.sshBastion.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{.Values.nodeName }}-ssh-keys
  namespace: {{.Release.Namespace}}
type: Opaque
data:
  authorized_keys: {{.Values.sshBastion.clientKeys.authorizedKeys | b64enc}}

---
apiVersion: v1
kind: Service
metadata:
  name: ssh-bastion-{{.Release.Name}}
  namespace: {{.Release.Namespace}}
spec:
  type: NodePort
  ports:
  - port: 2222
    nodePort: {{.Values.sshBastion.port}}
  selector:
    app: {{.Values.nodeName}}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{.Values.nodeName}}-sshd-config"
  namespace: {{.Release.Namespace}}
data:
  sshd_config: |
    #PermitOpen /config/sockets/plugin.sock
    #PermitOpen /config/sockets/interlink.sock
    AllowTcpForwarding yes

{{- end }}
